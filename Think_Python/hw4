#과제 8장 1 4 11번

#8.1
def read_backward(word):
    index=1
    for char in word:
        a=len(word)-index
        index=index+1
        print(word[a])
read_backward('이효리')


#8.4
def find(word, letter, start):
    index = 0
    iter = start
    while iter < len(word):
        if word[iter] == letter:
            index = index + 1
        iter = iter + 1
    return index
find('Eom kyu cheol','o',0)
find('Eom kyu cheol', 'o',2)

#8.11
def any_lowercase1(s):
    for c in s:
        if c.islower():
            return  True
        else:
            return  False
any_lowercase1('Aa')
any_lowercase1('aA')
# 함수는 return문을 만나는 순간 결과값을 돌려준 후 함수를 빠져나가게 된다.
# 그러므로 any_lowercase1함수는 첫번째 문자가 소문자인지 대문자인지만 보고 판단하므로 옳지 않게 작성된 함수이다.
def any_lowercase2(s):
    for c in s:
        if 'c'.islower():
            return 'True'
        else:
            return 'False'
any_lowercase2('Aa')
#이 함수는 input이 무엇이든, 결과는 'c'라는 그냥 char자체가 소문자인지 묻고 맞다면 'True'를 출력하라 했기에,
#  항상 'True'값만 출력되는 함수다.

def any_lowercase3(s):
    for c in s:
        flag = c.islower()
    return flag
any_lowercase3('Aa')
any_lowercase3('aA')
#이 함수는 for문이 완료된 마지막글자가 소문자인지의 여부만 확인하는 함수이기에 옳지 않다.
def any_lowercase4(s):
    flag = False
    for c in s:
        flag = flag or c.islower()
    return flag
any_lowercase4('aA')
any_lowercase4('AA')
#이 함수는 or를 통해, 최소 한개라도 소문자를 포함하면 True 값을 갖기에 소문자가 한개라도 있으면 True를 출력하는 함수다.

def any_lowercase5(s):
    for c in s:
        if not c.islower():
            return  False
    return True
any_lowercase5('aa')
any_lowercase5('Aa')
any_lowercase5('a a')
# 위의 함수는 input값에 소문자가 나오지 않는 순간, 바로 False값을 주며 모두 소문자일 경우 True를 반환한다.
# 약간 아쉬운 점이 있다면, 3번째 예시같이 띄어쓰기가 있는 소문자로만 이루어진 문자열은 공백때문에 False 값을 반환한다.
